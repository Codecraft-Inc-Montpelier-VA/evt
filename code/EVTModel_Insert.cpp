
/**************************** DO NOT EDIT THIS FILE ****************************
 *
 *  Filename:  EVTModel_Insert.cpp
 *
 *  This file is one of two automatically-generated files for the RRTGen
 *  EVTModel.  These automatically-generated files should not be
 *  edited; rather, make appropriate updates to the source Draw file and
 *  regenerate the files.
 *
 *       Created by:  RRTGenCodeGenerator.xsl, Version 1.1
 *  From model file:  C:\cygwin64\home\Cary\ShiraTronics_demos\Anoka\evt\code\EVTModel.odg
 *    Model version:  0.61
 *          On date:  August 17, 2021, at 3.11 p.m.
 *
 *        Copyright (c) 2007-2015 Codecraft, Inc.  All rights reserved.
 */

#include <string.h>
#include "EVTTestConstants.h"
#include "EVTModel_Insert.h"

// Incorporate the RRTGen framework.
#include "../../RRTGen/code/RRTGen.cpp"
#include "../../RRTGen/code/RRandom.cpp"

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wswitch"

unsigned long RRandom::PrevValue[ MAX_RRANDOM_IDS ];
int RRandom::Seed = 0;

extern RepeatableRandomTest rrt;       // the test
extern FSM                  *sender;

void Cabin_Model::Update( event theEvent, char parm1, char parm2 )
{
   #if defined( SHOW_EVENT_PROCESSING )
   char str[ 120 ]; // ample
   sprintf( str, "Event '%s(%c,%c)' @ state '%s' in %s (%i).",
            EventText( theEvent ), parm1, parm2,
            StateText( currentState ), name, theInstance );
   rrt.Log( str );
   //cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )

   state nextState = currentState;
   sender = this;

   switch( theEvent )
   {    
      case ALREADY_THERE:
         switch( currentState )
         {  
            case Are_we_already_there:
               // [1406]
               EVTModel_1406();
               nextState = Transferring_passengers;
               break;
                    
         }
         break;
        
      case ARRIVED_AT_FLOOR:
         switch( currentState )
         {  
            case Moving:
               // [1404]
               EVTModel_1404();
               nextState = Transferring_passengers;
               break;
                    
            case Emergency_stopping:
               // [1408]
               EVTModel_1408();
               nextState = Out_of_service;
               break;
                    
         }
         break;
        
      case CHANGE_DESTINATION:
         switch( currentState )
         {  
            case Moving:
               // [1402]
               EVTModel_1402( parm1, parm2 );
               nextState = Changing_destination;
               break;
                    
         }
         break;
        
      case DOORS_SECURE:
         switch( currentState )
         {  
            case Securing_doors:
               // [1416]
               EVTModel_1416();
               nextState = Locking_transfer;
               break;
                    
         }
         break;
        
      case GO:
         switch( currentState )
         {  
            case Locking_transfer:
               // [1411]
               EVTModel_1411();
               nextState = Requesting_transport_to_destination;
               break;
                    
         }
         break;
        
      case NEW_TRANSFER:
         switch( currentState )
         {  
            case Waiting_for_new_transfer:
               // [1401]
               EVTModel_1401();
               nextState = Are_we_already_there;
               break;
                    
            case Transferring_passengers:
               // [1405]
               EVTModel_1405();
               nextState = Are_we_already_there;
               break;
                    
         }
         break;
        
      case PREPARE_TO_MOVE:
         switch( currentState )
         {  
            case Are_we_already_there:
               // [1415]
               EVTModel_1415();
               nextState = Securing_doors;
               break;
                    
         }
         break;
        
      case START:
         switch( currentState )
         {  
            case Start:
               // [1400]
               EVTModel_1400();
               nextState = Waiting_for_new_transfer;
               break;
                    
         }
         break;
        
      case TAKE_OUT_OF_SERVICE:
         switch( currentState )
         {  
            case Moving:
               // [1407]
               EVTModel_1407();
               nextState = Emergency_stopping;
               break;
                    
            case Transferring_passengers:
               // [1409]
               EVTModel_1409();
               nextState = Out_of_service;
               break;
                    
            case Locking_transfer:
               // [1414]
               EVTModel_1414();
               nextState = Out_of_service;
               break;
                    
            case Securing_doors:
               // [1413]
               EVTModel_1413();
               nextState = Out_of_service;
               break;
                    
         }
         break;
        
      case TRANSPORT_IN_PROGRESS:
         switch( currentState )
         {  
            case Requesting_transport_to_destination:
               // [1412]
               EVTModel_1412();
               nextState = Moving;
               break;
                    
            case Changing_destination:
               // [1403]
               EVTModel_1403();
               nextState = Moving;
               break;
                    
         }
         break;
        
      case TRANSPORT_UNAVAILABLE:
         switch( currentState )
         {  
            case Requesting_transport_to_destination:
               // [1410]
               EVTModel_1410();
               nextState = Out_of_service;
               break;
                    
         }
         break;
        
   }
    
   currentState = nextState;

   #if defined( SHOW_EVENT_PROCESSING )
   sprintf( str, "New state is '%s'.", StateText( currentState ) );
   rrt.Log( str );
   cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )
} 

void Comparator_Model::Update( event theEvent, char parm1, char parm2 )
{
   #if defined( SHOW_EVENT_PROCESSING )
   char str[ 120 ]; // ample
   sprintf( str, "Event '%s(%c,%c)' @ state '%s' in %s (%i).",
            EventText( theEvent ), parm1, parm2,
            StateText( currentState ), name, theInstance );
   rrt.Log( str );
   //cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )

   state nextState = currentState;
   sender = this;

   switch( theEvent )
   {    
      case CAR_LOCATION:
         switch( currentState )
         {  
            case Waiting_for_initial_car_locations:
               // [1303]
               EVTModel_1303( parm1, parm2 );
               nextState = Waiting_for_initial_car_locations;
               break;
                    
            case Ready:
               // [1304]
               EVTModel_1304( parm1, parm2 );
               nextState = Ready;
               break;
                    
         }
         break;
        
      case DIR_INDICATOR:
         switch( currentState )
         {  
            case Ready:
               // [1311]
               EVTModel_1311( parm1, parm2 );
               nextState = Ready;
               break;
                    
         }
         break;
        
      case DOOR_STATUS:
         switch( currentState )
         {  
            case Ready:
               // [1309]
               EVTModel_1309( parm1, parm2 );
               nextState = Ready;
               break;
                    
         }
         break;
        
      case DO_INITIALIZE:
         switch( currentState )
         {  
            case Waiting_to_begin_test:
               // [1301]
               EVTModel_1301();
               nextState = Waiting_for_initial_car_locations;
               break;
                    
         }
         break;
        
      case FLOOR_CALL:
         switch( currentState )
         {  
            case Ready:
               // [1306]
               EVTModel_1306( parm1, parm2 );
               nextState = Ready;
               break;
                    
         }
         break;
        
      case INITIALIZED:
         switch( currentState )
         {  
            case Waiting_for_initial_car_locations:
               // [1302]
               EVTModel_1302();
               nextState = Ready;
               break;
                    
         }
         break;
        
      case MODELED_CAR_LOCATION:
         switch( currentState )
         {  
            case Ready:
               // [1308]
               EVTModel_1308( parm1, parm2 );
               nextState = Ready;
               break;
                    
         }
         break;
        
      case MODELED_DIR_INDICATOR:
         switch( currentState )
         {  
            case Ready:
               // [1312]
               EVTModel_1312( parm1, parm2 );
               nextState = Ready;
               break;
                    
         }
         break;
        
      case MODELED_DOOR_STATUS:
         switch( currentState )
         {  
            case Ready:
               // [1310]
               EVTModel_1310( parm1, parm2 );
               nextState = Ready;
               break;
                    
         }
         break;
        
      case ONE_SECOND_TICK:
         switch( currentState )
         {  
            case Ready:
               // [1307]
               EVTModel_1307();
               nextState = Ready;
               break;
                    
         }
         break;
        
      case START:
         switch( currentState )
         {  
            case Start:
               // [1300]
               EVTModel_1300();
               nextState = Waiting_to_begin_test;
               break;
                    
         }
         break;
        
      case STOP_REQUESTED:
         switch( currentState )
         {  
            case Ready:
               // [1305]
               EVTModel_1305( parm1, parm2 );
               nextState = Ready;
               break;
                    
         }
         break;
        
   }
    
   currentState = nextState;

   #if defined( SHOW_EVENT_PROCESSING )
   sprintf( str, "New state is '%s'.", StateText( currentState ) );
   rrt.Log( str );
   cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )
} 

void CompareCarLocations_Model::Update( event theEvent, char parm1, char parm2 )
{
   #if defined( SHOW_EVENT_PROCESSING )
   char str[ 120 ]; // ample
   sprintf( str, "Event '%s(%c,%c)' @ state '%s' in %s (%i).",
            EventText( theEvent ), parm1, parm2,
            StateText( currentState ), name, theInstance );
   rrt.Log( str );
   //cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )

   state nextState = currentState;
   sender = this;

   switch( theEvent )
   {    
      case CAR_LOCATION:
         switch( currentState )
         {  
            case Ready:
               // [2103]
               EVTModel_2103( parm1, parm2 );
               nextState = Waiting_for_modeled_car_location;
               break;
                    
            case Waiting_for_car_location:
               // [2102]
               EVTModel_2102( parm1, parm2 );
               nextState = Ready;
               break;
                    
            case Waiting_for_modeled_car_location:
               // [2106]
               EVTModel_2106( parm1, parm2 );
               nextState = Waiting_for_modeled_car_location;
               break;
                    
         }
         break;
        
      case MODELED_CAR_LOCATION:
         switch( currentState )
         {  
            case Ready:
               // [2101]
               EVTModel_2101( parm1, parm2 );
               nextState = Waiting_for_car_location;
               break;
                    
            case Waiting_for_modeled_car_location:
               // [2104]
               EVTModel_2104( parm1, parm2 );
               nextState = Ready;
               break;
                    
         }
         break;
        
      case START:
         switch( currentState )
         {  
            case Start:
               // [2100]
               EVTModel_2100();
               nextState = Ready;
               break;
                    
         }
         break;
        
      case TIMEOUT:
         switch( currentState )
         {  
            case Waiting_for_car_location:
               // [2108]
               EVTModel_2108();
               nextState = Ready;
               break;
                    
            case Waiting_for_modeled_car_location:
               // [2109]
               EVTModel_2109();
               nextState = Ready;
               break;
                    
         }
         break;
        
      case TO_READY:
         switch( currentState )
         {  
            case Waiting_for_car_location:
               // [2105]
               EVTModel_2105();
               nextState = Ready;
               break;
                    
            case Waiting_for_modeled_car_location:
               // [2107]
               EVTModel_2107();
               nextState = Ready;
               break;
                    
         }
         break;
        
   }
    
   currentState = nextState;

   #if defined( SHOW_EVENT_PROCESSING )
   sprintf( str, "New state is '%s'.", StateText( currentState ) );
   rrt.Log( str );
   cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )
} 

void CompareDirIndicators_Model::Update( event theEvent, char parm1, char parm2 )
{
   #if defined( SHOW_EVENT_PROCESSING )
   char str[ 120 ]; // ample
   sprintf( str, "Event '%s(%c,%c)' @ state '%s' in %s (%i).",
            EventText( theEvent ), parm1, parm2,
            StateText( currentState ), name, theInstance );
   rrt.Log( str );
   //cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )

   state nextState = currentState;
   sender = this;

   switch( theEvent )
   {    
      case DIRECTION_INDICATOR:
         switch( currentState )
         {  
            case Ready:
               // [2303]
               EVTModel_2303( parm1, parm2 );
               nextState = Waiting_for_modeled_direction_indicator;
               break;
                    
            case Waiting_for_direction_indicator:
               // [2302]
               EVTModel_2302( parm1, parm2 );
               nextState = Ready;
               break;
                    
            case Waiting_for_modeled_direction_indicator:
               // [2306]
               EVTModel_2306( parm1, parm2 );
               nextState = Waiting_for_modeled_direction_indicator;
               break;
                    
         }
         break;
        
      case MODELED_DIRECTION_INDICATOR:
         switch( currentState )
         {  
            case Ready:
               // [2301]
               EVTModel_2301( parm1, parm2 );
               nextState = Waiting_for_direction_indicator;
               break;
                    
            case Waiting_for_modeled_direction_indicator:
               // [2304]
               EVTModel_2304( parm1, parm2 );
               nextState = Ready;
               break;
                    
         }
         break;
        
      case START:
         switch( currentState )
         {  
            case Start:
               // [2300]
               EVTModel_2300();
               nextState = Ready;
               break;
                    
         }
         break;
        
      case TIMEOUT:
         switch( currentState )
         {  
            case Waiting_for_direction_indicator:
               // [2308]
               EVTModel_2308();
               nextState = Ready;
               break;
                    
            case Waiting_for_modeled_direction_indicator:
               // [2309]
               EVTModel_2309();
               nextState = Ready;
               break;
                    
         }
         break;
        
      case TO_READY:
         switch( currentState )
         {  
            case Waiting_for_direction_indicator:
               // [2305]
               EVTModel_2305();
               nextState = Ready;
               break;
                    
            case Waiting_for_modeled_direction_indicator:
               // [2307]
               EVTModel_2307();
               nextState = Ready;
               break;
                    
         }
         break;
        
   }
    
   currentState = nextState;

   #if defined( SHOW_EVENT_PROCESSING )
   sprintf( str, "New state is '%s'.", StateText( currentState ) );
   rrt.Log( str );
   cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )
} 

void CompareDoorPositions_Model::Update( event theEvent, char parm1, char parm2 )
{
   #if defined( SHOW_EVENT_PROCESSING )
   char str[ 120 ]; // ample
   sprintf( str, "Event '%s(%c,%c)' @ state '%s' in %s (%i).",
            EventText( theEvent ), parm1, parm2,
            StateText( currentState ), name, theInstance );
   rrt.Log( str );
   //cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )

   state nextState = currentState;
   sender = this;

   switch( theEvent )
   {    
      case DOOR_POSITION:
         switch( currentState )
         {  
            case Ready:
               // [2203]
               EVTModel_2203( parm1, parm2 );
               nextState = Waiting_for_modeled_door_position;
               break;
                    
            case Waiting_for_door_position:
               // [2202]
               EVTModel_2202( parm1, parm2 );
               nextState = Ready;
               break;
                    
            case Waiting_for_modeled_door_position:
               // [2206]
               EVTModel_2206( parm1, parm2 );
               nextState = Waiting_for_modeled_door_position;
               break;
                    
         }
         break;
        
      case MODELED_DOOR_POSITION:
         switch( currentState )
         {  
            case Ready:
               // [2201]
               EVTModel_2201( parm1, parm2 );
               nextState = Waiting_for_door_position;
               break;
                    
            case Waiting_for_modeled_door_position:
               // [2204]
               EVTModel_2204( parm1, parm2 );
               nextState = Ready;
               break;
                    
         }
         break;
        
      case START:
         switch( currentState )
         {  
            case Start:
               // [2200]
               EVTModel_2200();
               nextState = Ready;
               break;
                    
         }
         break;
        
      case TIMEOUT:
         switch( currentState )
         {  
            case Waiting_for_door_position:
               // [2208]
               EVTModel_2208();
               nextState = Ready;
               break;
                    
            case Waiting_for_modeled_door_position:
               // [2209]
               EVTModel_2209();
               nextState = Ready;
               break;
                    
         }
         break;
        
      case TO_READY:
         switch( currentState )
         {  
            case Waiting_for_door_position:
               // [2205]
               EVTModel_2205();
               nextState = Ready;
               break;
                    
            case Waiting_for_modeled_door_position:
               // [2207]
               EVTModel_2207();
               nextState = Ready;
               break;
                    
         }
         break;
        
   }
    
   currentState = nextState;

   #if defined( SHOW_EVENT_PROCESSING )
   sprintf( str, "New state is '%s'.", StateText( currentState ) );
   rrt.Log( str );
   cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )
} 

void Door_Model::Update( event theEvent, char parm1, char parm2 )
{
   #if defined( SHOW_EVENT_PROCESSING )
   char str[ 120 ]; // ample
   sprintf( str, "Event '%s(%c,%c)' @ state '%s' in %s (%i).",
            EventText( theEvent ), parm1, parm2,
            StateText( currentState ), name, theInstance );
   rrt.Log( str );
   //cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )

   state nextState = currentState;
   sender = this;

   switch( theEvent )
   {    
      case CLOSE:
         switch( currentState )
         {  
            case Door_is_opened:
               // [1506]
               EVTModel_1506();
               nextState = Door_is_closing;
               break;
                    
         }
         break;
        
      case DOOR_IS_CLOSED:
         switch( currentState )
         {  
            case Door_is_half_closed:
               // [1507]
               EVTModel_1507();
               nextState = Door_is_closed;
               break;
                    
         }
         break;
        
      case DOOR_IS_HALF_CLOSED:
         switch( currentState )
         {  
            case Door_is_closing:
               // [1509]
               EVTModel_1509();
               nextState = Door_is_half_closed;
               break;
                    
         }
         break;
        
      case DOOR_IS_HALF_OPEN:
         switch( currentState )
         {  
            case Door_is_opening:
               // [1508]
               EVTModel_1508();
               nextState = Door_is_half_opened;
               break;
                    
         }
         break;
        
      case DOOR_IS_OPEN:
         switch( currentState )
         {  
            case Door_is_half_opened:
               // [1505]
               EVTModel_1505();
               nextState = Door_is_opened;
               break;
                    
         }
         break;
        
      case LOCK:
         switch( currentState )
         {  
            case Door_is_closed:
               // [1502]
               EVTModel_1502();
               nextState = Door_is_locked;
               break;
                    
         }
         break;
        
      case OPEN:
         switch( currentState )
         {  
            case Door_is_unlocking:
               // [1504]
               EVTModel_1504();
               nextState = Door_is_opening;
               break;
                    
         }
         break;
        
      case START:
         switch( currentState )
         {  
            case Start:
               // [1500]
               EVTModel_1500();
               nextState = Door_is_closed;
               break;
                    
         }
         break;
        
      case UNLOCK:
         switch( currentState )
         {  
            case Door_is_closed:
               // [1501]
               EVTModel_1501();
               nextState = Door_is_unlocking;
               break;
                    
            case Door_is_locked:
               // [1503]
               EVTModel_1503();
               nextState = Door_is_unlocking;
               break;
                    
         }
         break;
        
   }
    
   currentState = nextState;

   #if defined( SHOW_EVENT_PROCESSING )
   sprintf( str, "New state is '%s'.", StateText( currentState ) );
   rrt.Log( str );
   cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )
} 

void EVT_Configuration_Model::Update( event theEvent, char parm1, char parm2 )
{
   #if defined( SHOW_EVENT_PROCESSING )
   char str[ 120 ]; // ample
   sprintf( str, "Event '%s(%c,%c)' @ state '%s' in %s (%i).",
            EventText( theEvent ), parm1, parm2,
            StateText( currentState ), name, theInstance );
   rrt.Log( str );
   //cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )

   state nextState = currentState;
   sender = this;

   switch( theEvent )
   {    
      case ABORT_TEST:
         switch( currentState )
         {  
            case Configuration_established:
               // [1017]
               EVTModel_1017();
               nextState = Test_is_aborted;
               break;
                    
         }
         break;
        
      case BEGIN_TEST:
         switch( currentState )
         {  
            case Configuration_established:
               // [1015]
               EVTModel_1015();
               nextState = Test_in_progress;
               break;
                    
         }
         break;
        
      case DONE:
         switch( currentState )
         {  
            case Setting_ground_floor_level:
               // [1003]
               EVTModel_1003();
               nextState = Setting_door_open_close_time;
               break;
                    
            case Setting_door_open_close_time:
               // [1008]
               EVTModel_1008();
               nextState = Setting_floor_height;
               break;
                    
            case Setting_floor_height:
               // [1009]
               EVTModel_1009();
               nextState = Setting_maximum_cabin_velocity;
               break;
                    
            case Setting_maximum_cabin_velocity:
               // [1010]
               EVTModel_1010();
               nextState = Setting_maximum_close_attempts;
               break;
                    
            case Setting_maximum_close_attempts:
               // [1011]
               EVTModel_1011();
               nextState = Setting_normal_door_wait_time;
               break;
                    
            case Setting_normal_door_wait_time:
               // [1012]
               EVTModel_1012();
               nextState = Setting_minimum_stopping_distance;
               break;
                    
            case Setting_minimum_stopping_distance:
               // [1013]
               EVTModel_1013();
               nextState = Setting_block_clear_time;
               break;
                    
            case Setting_block_clear_time:
               // [1014]
               EVTModel_1014();
               nextState = Configuration_established;
               break;
                    
            case Ready_to_randomize:
               // [1003]
               EVTModel_1003();
               nextState = Setting_door_open_close_time;
               break;
                    
         }
         break;
        
      case END_TEST:
         switch( currentState )
         {  
            case Test_in_progress:
               // [1016]
               EVTModel_1016();
               nextState = Test_is_completed;
               break;
                    
         }
         break;
        
      case FLOOR_LABELS_RECEIVED:
         switch( currentState )
         {  
            case Waiting_for_floor_labels:
               // [1002]
               EVTModel_1002();
               nextState = Ready_to_randomize;
               break;
                    
         }
         break;
        
      case MAX_BLDG_DIMS_RECEIVED:
         switch( currentState )
         {  
            case Waiting_for_maximum_building_dimensions:
               // [1001]
               EVTModel_1001( parm1, parm2 );
               nextState = Waiting_for_floor_labels;
               break;
                    
         }
         break;
        
      case QUIT_TEST:
         switch( currentState )
         {  
            case Test_in_progress:
               // [1018]
               EVTModel_1018();
               nextState = Test_is_stopped_by_user;
               break;
                    
         }
         break;
        
      case SET_FLOOR_COUNT:
         switch( currentState )
         {  
            case Ready_to_randomize:
               // [1004]
               EVTModel_1004();
               nextState = Setting_number_of_floors;
               break;
                    
         }
         break;
        
      case SET_FLOOR_LABELS:
         switch( currentState )
         {  
            case Setting_number_of_shafts:
               // [1006]
               EVTModel_1006();
               nextState = Setting_floor_labels;
               break;
                    
         }
         break;
        
      case SET_GROUND_FLOOR:
         switch( currentState )
         {  
            case Setting_floor_labels:
               // [1007]
               EVTModel_1007();
               nextState = Setting_ground_floor_level;
               break;
                    
         }
         break;
        
      case SET_SHAFT_COUNT:
         switch( currentState )
         {  
            case Setting_number_of_floors:
               // [1005]
               EVTModel_1005();
               nextState = Setting_number_of_shafts;
               break;
                    
         }
         break;
        
      case START:
         switch( currentState )
         {  
            case Start:
               // [1000]
               EVTModel_1000();
               nextState = Waiting_for_maximum_building_dimensions;
               break;
                    
         }
         break;
        
   }
    
   currentState = nextState;

   #if defined( SHOW_EVENT_PROCESSING )
   sprintf( str, "New state is '%s'.", StateText( currentState ) );
   rrt.Log( str );
   cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )
} 

void EVT_Show_Model::Update( event theEvent, char parm1, char parm2 )
{
   #if defined( SHOW_EVENT_PROCESSING )
   char str[ 120 ]; // ample
   sprintf( str, "Event '%s(%c,%c)' @ state '%s' in %s (%i).",
            EventText( theEvent ), parm1, parm2,
            StateText( currentState ), name, theInstance );
   rrt.Log( str );
   //cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )

   state nextState = currentState;
   sender = this;

   switch( theEvent )
   {    
      case ALERT:
         switch( currentState )
         {  
            case Ready_to_show:
               // [1104]
               EVTModel_1104( parm1, parm2 );
               nextState = Ready_to_show;
               break;
                    
         }
         break;
        
      case BEGIN_TEST:
         switch( currentState )
         {  
            case Waiting_to_begin_test:
               // [1101]
               EVTModel_1101();
               nextState = Ready_to_show;
               break;
                    
         }
         break;
        
      case END_TEST:
         switch( currentState )
         {  
            case Ready_to_show:
               // [1103]
               EVTModel_1103();
               nextState = Test_output_is_complete;
               break;
                    
         }
         break;
        
      case QUIESCE_TEST:
         switch( currentState )
         {  
            case Ready_to_show:
               // [1105]
               EVTModel_1105();
               nextState = Ready_to_show;
               break;
                    
         }
         break;
        
      case SHOW_IT:
         switch( currentState )
         {  
            case Ready_to_show:
               // [1102]
               EVTModel_1102();
               nextState = Ready_to_show;
               break;
                    
         }
         break;
        
      case START:
         switch( currentState )
         {  
            case Start:
               // [1100]
               EVTModel_1100();
               nextState = Waiting_to_begin_test;
               break;
                    
         }
         break;
        
   }
    
   currentState = nextState;

   #if defined( SHOW_EVENT_PROCESSING )
   sprintf( str, "New state is '%s'.", StateText( currentState ) );
   rrt.Log( str );
   cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )
} 

void Shaft_Model::Update( event theEvent, char parm1, char parm2 )
{
   #if defined( SHOW_EVENT_PROCESSING )
   char str[ 120 ]; // ample
   sprintf( str, "Event '%s(%c,%c)' @ state '%s' in %s (%i).",
            EventText( theEvent ), parm1, parm2,
            StateText( currentState ), name, theInstance );
   rrt.Log( str );
   //cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )

   state nextState = currentState;
   sender = this;

   switch( theEvent )
   {    
      case DEST_SELECTED:
         switch( currentState )
         {  
            case Searching_for_best_destination:
               // [1606]
               EVTModel_1606( parm1, parm2 );
               nextState = Verifying_in_service;
               break;
                    
         }
         break;
        
      case NO_DEST:
         switch( currentState )
         {  
            case Searching_for_best_destination:
               // [1602]
               EVTModel_1602();
               nextState = Waiting_for_stop_or_call_request;
               break;
                    
         }
         break;
        
      case NO_TRANSFER_IN_PROGRESS:
         switch( currentState )
         {  
            case Going_out_of_service:
               // [1610]
               EVTModel_1610();
               nextState = Out_of_service;
               break;
                    
         }
         break;
        
      case SERVICE_REQUESTED:
         switch( currentState )
         {  
            case Waiting_for_stop_or_call_request:
               // [1601]
               EVTModel_1601();
               nextState = Searching_for_best_destination;
               break;
                    
         }
         break;
        
      case SET_NEW_DEST:
         switch( currentState )
         {  
            case Verifying_in_service:
               // [1605]
               EVTModel_1605( parm1, parm2 );
               nextState = Creating_or_updating_transfer;
               break;
                    
         }
         break;
        
      case START:
         switch( currentState )
         {  
            case Start:
               // [1600]
               EVTModel_1600();
               nextState = Waiting_for_stop_or_call_request;
               break;
                    
         }
         break;
        
      case TAKE_OUT_OF_SERVICE:
         switch( currentState )
         {  
            case Waiting_for_stop_or_call_request:
               // [1608]
               EVTModel_1608();
               nextState = Going_out_of_service;
               break;
                    
            case Verifying_in_service:
               // [1607]
               EVTModel_1607();
               nextState = Going_out_of_service;
               break;
                    
         }
         break;
        
      case TRANSFER_COMPLETED:
         switch( currentState )
         {  
            case Waiting_for_stop_or_call_request:
               // [1603]
               EVTModel_1603();
               nextState = Searching_for_best_destination;
               break;
                    
            case Going_out_of_service:
               // [1609]
               EVTModel_1609();
               nextState = Out_of_service;
               break;
                    
         }
         break;
        
      case XFER_UPDATE_REQUESTED:
         switch( currentState )
         {  
            case Creating_or_updating_transfer:
               // [1604]
               EVTModel_1604();
               nextState = Waiting_for_stop_or_call_request;
               break;
                    
         }
         break;
        
   }
    
   currentState = nextState;

   #if defined( SHOW_EVENT_PROCESSING )
   sprintf( str, "New state is '%s'.", StateText( currentState ) );
   rrt.Log( str );
   cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )
} 

void ShaftLevel_Model::Update( event theEvent, char parm1, char parm2 )
{
   #if defined( SHOW_EVENT_PROCESSING )
   char str[ 120 ]; // ample
   sprintf( str, "Event '%s(%c,%c)' @ state '%s' in %s (%i).",
            EventText( theEvent ), parm1, parm2,
            StateText( currentState ), name, theInstance );
   rrt.Log( str );
   //cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )

   state nextState = currentState;
   sender = this;

   switch( theEvent )
   {    
      case ALL_REQUESTS_CLEARED:
         switch( currentState )
         {  
            case Announcing_new_request:
               // [1714]
               EVTModel_1714();
               nextState = Not_requested;
               break;
                    
         }
         break;
        
      case CALL_REGISTERED:
         switch( currentState )
         {  
            case Registering_call:
               // [1703]
               EVTModel_1703();
               nextState = Announcing_new_request;
               break;
                    
         }
         break;
        
      case CALL_REMAINING:
         switch( currentState )
         {  
            case Announcing_new_request:
               // [1709]
               EVTModel_1709();
               nextState = Pending;
               break;
                    
         }
         break;
        
      case FLOOR_CALLED:
         switch( currentState )
         {  
            case Not_requested:
               // [1701]
               EVTModel_1701( parm1, parm2 );
               nextState = Migrating_to_register_call;
               break;
                    
            case Pending:
               // [1705]
               EVTModel_1705( parm1, parm2 );
               nextState = Migrating_to_register_call;
               break;
                    
         }
         break;
        
      case MIGRATED_FOR_CALLED:
         switch( currentState )
         {  
            case Migrating_to_register_call:
               // [1702]
               EVTModel_1702( parm1, parm2 );
               nextState = Registering_call;
               break;
                    
         }
         break;
        
      case MIGRATED_FOR_STOP:
         switch( currentState )
         {  
            case Migrating_to_register_stop:
               // [1710]
               EVTModel_1710();
               nextState = Registering_stop;
               break;
                    
         }
         break;
        
      case PENDING:
         switch( currentState )
         {  
            case Announcing_new_request:
               // [1704]
               EVTModel_1704();
               nextState = Pending;
               break;
                    
            case Clearing:
               // [1707]
               EVTModel_1707();
               nextState = Pending;
               break;
                    
         }
         break;
        
      case SERVICED:
         switch( currentState )
         {  
            case Pending:
               // [1706]
               EVTModel_1706( parm1, parm2 );
               nextState = Clearing;
               break;
                    
         }
         break;
        
      case START:
         switch( currentState )
         {  
            case Start:
               // [1700]
               EVTModel_1700();
               nextState = Not_requested;
               break;
                    
         }
         break;
        
      case STOP_ACTIVE:
         switch( currentState )
         {  
            case Migrating_to_register_stop:
               // [1716]
               EVTModel_1716();
               nextState = Pending;
               break;
                    
         }
         break;
        
      case STOP_ALREADY_ACTIVE:
         switch( currentState )
         {  
            case Migrating_to_register_stop:
               // [1715]
               EVTModel_1715();
               nextState = Not_requested;
               break;
                    
         }
         break;
        
      case STOP_REGISTERED:
         switch( currentState )
         {  
            case Registering_stop:
               // [1711]
               EVTModel_1711();
               nextState = Announcing_new_request;
               break;
                    
         }
         break;
        
      case STOP_REQUESTED:
         switch( currentState )
         {  
            case Not_requested:
               // [1713]
               EVTModel_1713();
               nextState = Migrating_to_register_stop;
               break;
                    
            case Pending:
               // [1712]
               EVTModel_1712();
               nextState = Migrating_to_register_stop;
               break;
                    
         }
         break;
        
      case XFER_DELETED:
         switch( currentState )
         {  
            case Pending:
               // [1708]
               EVTModel_1708();
               nextState = Announcing_new_request;
               break;
                    
         }
         break;
        
   }
    
   currentState = nextState;

   #if defined( SHOW_EVENT_PROCESSING )
   sprintf( str, "New state is '%s'.", StateText( currentState ) );
   rrt.Log( str );
   cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )
} 

void Signal_IO_Model::Update( event theEvent, char parm1, char parm2 )
{
   #if defined( SHOW_EVENT_PROCESSING )
   char str[ 120 ]; // ample
   sprintf( str, "Event '%s(%c,%c)' @ state '%s' in %s (%i).",
            EventText( theEvent ), parm1, parm2,
            StateText( currentState ), name, theInstance );
   rrt.Log( str );
   //cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )

   state nextState = currentState;
   sender = this;

   switch( theEvent )
   {    
      case CLOSE_DOOR:
         switch( currentState )
         {  
            case Door_open:
               // [2003]
               EVTModel_2003();
               nextState = Simulating_obstructed_close_1;
               break;
                    
         }
         break;
        
      case CONTINUE_CLOSING_DOOR:
         switch( currentState )
         {  
            case Door_half_closed:
               // [2010]
               EVTModel_2010();
               nextState = Simulating_obstructed_close_2;
               break;
                    
         }
         break;
        
      case JAMMED:
         switch( currentState )
         {  
            case Simulating_obstructed_close_1:
               // [2006]
               EVTModel_2006();
               nextState = Door_jammed;
               break;
                    
            case Simulating_obstructed_close_2:
               // [2011]
               EVTModel_2011();
               nextState = Door_jammed;
               break;
                    
         }
         break;
        
      case NOT_OBSTRUCTED:
         switch( currentState )
         {  
            case Simulating_obstructed_close_1:
               // [2004]
               EVTModel_2004();
               nextState = Door_closing;
               break;
                    
            case Simulating_obstructed_close_2:
               // [2009]
               EVTModel_2009();
               nextState = Door_closed;
               break;
                    
         }
         break;
        
      case OPEN_DOOR:
         switch( currentState )
         {  
            case Door_closed:
               // [2001]
               EVTModel_2001();
               nextState = Door_opening;
               break;
                    
            case Door_jammed:
               // [2007]
               EVTModel_2007();
               nextState = Door_opening;
               break;
                    
         }
         break;
        
      case START:
         switch( currentState )
         {  
            case Start:
               // [2000]
               EVTModel_2000();
               nextState = Door_closed;
               break;
                    
         }
         break;
        
      case TRANSITIONED:
         switch( currentState )
         {  
            case Door_closing:
               // [2005]
               EVTModel_2005();
               nextState = Door_half_closed;
               break;
                    
            case Door_opening:
               // [2002]
               EVTModel_2002();
               nextState = Door_half_open;
               break;
                    
            case Door_half_open:
               // [2008]
               EVTModel_2008();
               nextState = Door_open;
               break;
                    
         }
         break;
        
   }
    
   currentState = nextState;

   #if defined( SHOW_EVENT_PROCESSING )
   sprintf( str, "New state is '%s'.", StateText( currentState ) );
   rrt.Log( str );
   cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )
} 

void Stim_CarButtons_Model::Update( event theEvent, char parm1, char parm2 )
{
   #if defined( SHOW_EVENT_PROCESSING )
   char str[ 120 ]; // ample
   sprintf( str, "Event '%s(%c,%c)' @ state '%s' in %s (%i).",
            EventText( theEvent ), parm1, parm2,
            StateText( currentState ), name, theInstance );
   rrt.Log( str );
   //cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )

   state nextState = currentState;
   sender = this;

   switch( theEvent )
   {    
      case BEGIN_TEST:
         switch( currentState )
         {  
            case Waiting_to_begin_test:
               // [1201]
               EVTModel_1201();
               nextState = Ready_to_push_car_button;
               break;
                    
         }
         break;
        
      case END_TEST:
         switch( currentState )
         {  
            case Car_button_pushing_is_suspended:
               // [1204]
               EVTModel_1204();
               nextState = Test_is_ended;
               break;
                    
         }
         break;
        
      case QUIESCE_TEST:
         switch( currentState )
         {  
            case Ready_to_push_car_button:
               // [1203]
               EVTModel_1203();
               nextState = Car_button_pushing_is_suspended;
               break;
                    
         }
         break;
        
      case SHOW_CHANGED:
         switch( currentState )
         {  
            case Car_button_pushing_is_suspended:
               // [1205]
               EVTModel_1205();
               nextState = Car_button_pushing_is_suspended;
               break;
                    
         }
         break;
        
      case SHOW_UNCHANGED:
         switch( currentState )
         {  
            case Car_button_pushing_is_suspended:
               // [1206]
               EVTModel_1206();
               nextState = Car_button_pushing_is_suspended;
               break;
                    
         }
         break;
        
      case START:
         switch( currentState )
         {  
            case Start:
               // [1200]
               EVTModel_1200();
               nextState = Waiting_to_begin_test;
               break;
                    
         }
         break;
        
      case TIME_TO_PUSH_THE_CAR_BUTTON:
         switch( currentState )
         {  
            case Ready_to_push_car_button:
               // [1202]
               EVTModel_1202();
               nextState = Ready_to_push_car_button;
               break;
                    
         }
         break;
        
   }
    
   currentState = nextState;

   #if defined( SHOW_EVENT_PROCESSING )
   sprintf( str, "New state is '%s'.", StateText( currentState ) );
   rrt.Log( str );
   cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )
} 

void Transfer_Model::Update( event theEvent, char parm1, char parm2 )
{
   #if defined( SHOW_EVENT_PROCESSING )
   char str[ 120 ]; // ample
   sprintf( str, "Event '%s(%c,%c)' @ state '%s' in %s (%i).",
            EventText( theEvent ), parm1, parm2,
            StateText( currentState ), name, theInstance );
   rrt.Log( str );
   //cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )

   state nextState = currentState;
   sender = this;

   switch( theEvent )
   {    
      case CABIN_AT_DESTINATION:
         switch( currentState )
         {  
            case Waiting_for_service:
               // [1809]
               EVTModel_1809();
               nextState = Clearing_requests;
               break;
                    
            case Service_in_progress:
               // [1806]
               EVTModel_1806();
               nextState = Clearing_requests;
               break;
                    
         }
         break;
        
      case CABIN_REDIRECTED:
         switch( currentState )
         {  
            case Service_in_progress:
               // [1812]
               EVTModel_1812( parm1, parm2 );
               nextState = Updating_cabin_moving;
               break;
                    
         }
         break;
        
      case DELETE:
         switch( currentState )
         {  
            case Checking_for_hold:
               // [1808]
               EVTModel_1808();
               nextState = Deleting;
               break;
                    
         }
         break;
        
      case DISPATCH_CABIN:
         switch( currentState )
         {  
            case Waiting_for_service:
               // [1805]
               EVTModel_1805();
               nextState = Service_in_progress;
               break;
                    
         }
         break;
        
      case DOOR_CLOSED:
         switch( currentState )
         {  
            case Holding_for_cleared_call:
               // [1815]
               EVTModel_1815();
               nextState = Deleting;
               break;
                    
         }
         break;
        
      case E_CANCEL:
         switch( currentState )
         {  
            case Service_in_progress:
               // [1804]
               EVTModel_1804();
               nextState = Canceling_for_emergency;
               break;
                    
            case Waiting_for_service:
               // [1803]
               EVTModel_1803();
               nextState = Canceling_for_emergency;
               break;
                    
         }
         break;
        
      case HOLD_FOR_CALL:
         switch( currentState )
         {  
            case Checking_for_hold:
               // [1814]
               EVTModel_1814();
               nextState = Holding_for_cleared_call;
               break;
                    
         }
         break;
        
      case INITIALIZE:
         switch( currentState )
         {  
            case Waiting_to_initialize:
               // [1816]
               EVTModel_1816( parm1, parm2 );
               nextState = Waiting_for_service;
               break;
                    
         }
         break;
        
      case SERVICED:
         switch( currentState )
         {  
            case Clearing_requests:
               // [1807]
               EVTModel_1807( parm1, parm2 );
               nextState = Checking_for_hold;
               break;
                    
         }
         break;
        
      case START:
         switch( currentState )
         {  
            case Start:
               // [1800]
               EVTModel_1800();
               nextState = Waiting_to_initialize;
               break;
                    
         }
         break;
        
      case UPDATE:
         switch( currentState )
         {  
            case Waiting_for_service:
               // [1801]
               EVTModel_1801( parm1, parm2 );
               nextState = Updating_cabin_stationary;
               break;
                    
            case Service_in_progress:
               // [1810]
               EVTModel_1810( parm1, parm2 );
               nextState = Requesting_change_to_destination;
               break;
                    
         }
         break;
        
      case UPDATE_REQUESTED:
         switch( currentState )
         {  
            case Requesting_change_to_destination:
               // [1811]
               EVTModel_1811();
               nextState = Service_in_progress;
               break;
                    
         }
         break;
        
      case UPDATE_SUCCEEDED:
         switch( currentState )
         {  
            case Updating_cabin_stationary:
               // [1802]
               EVTModel_1802();
               nextState = Waiting_for_service;
               break;
                    
            case Updating_cabin_moving:
               // [1813]
               EVTModel_1813();
               nextState = Service_in_progress;
               break;
                    
         }
         break;
        
   }
    
   currentState = nextState;

   #if defined( SHOW_EVENT_PROCESSING )
   sprintf( str, "New state is '%s'.", StateText( currentState ) );
   rrt.Log( str );
   cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )
} 

void Transport_Model::Update( event theEvent, char parm1, char parm2 )
{
   #if defined( SHOW_EVENT_PROCESSING )
   char str[ 120 ]; // ample
   sprintf( str, "Event '%s(%c,%c)' @ state '%s' in %s (%i).",
            EventText( theEvent ), parm1, parm2,
            StateText( currentState ), name, theInstance );
   rrt.Log( str );
   //cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )

   state nextState = currentState;
   sender = this;

   switch( theEvent )
   {    
      case CT_GO_TO_FLOOR:
         switch( currentState )
         {  
            case Going_to_floor:
               // [1906]
               EVTModel_1906( parm1, parm2 );
               nextState = Updating_destination;
               break;
                    
         }
         break;
        
      case DONE:
         switch( currentState )
         {  
            case Simulating_move_time:
               // [1904]
               EVTModel_1904();
               nextState = Stationary;
               break;
                    
         }
         break;
        
      case GO_TO_FLOOR:
         switch( currentState )
         {  
            case Stationary:
               // [1902]
               EVTModel_1902( parm1, parm2 );
               nextState = Initializing_move_coordinates;
               break;
                    
            case Initializing_move_coordinates:
               // [1905]
               EVTModel_1905( parm1, parm2 );
               nextState = Going_to_floor;
               break;
                    
            case Simulating_move_time:
               // [1911]
               EVTModel_1911( parm1, parm2 );
               nextState = Going_to_floor;
               break;
                    
         }
         break;
        
      case INITIALIZED:
         switch( currentState )
         {  
            case Initializing:
               // [1901]
               EVTModel_1901();
               nextState = Stationary;
               break;
                    
         }
         break;
        
      case QUICK_STOP:
         switch( currentState )
         {  
            case Updating_destination:
               // [1909]
               EVTModel_1909();
               nextState = Making_quick_safe_stop;
               break;
                    
            case Initializing_move_coordinates:
               // [1910]
               EVTModel_1910();
               nextState = Making_quick_safe_stop;
               break;
                    
            case Simulating_move_time:
               // [1912]
               EVTModel_1912();
               nextState = Making_quick_safe_stop;
               break;
                    
         }
         break;
        
      case START:
         switch( currentState )
         {  
            case Start:
               // [1900]
               EVTModel_1900();
               nextState = Initializing;
               break;
                    
         }
         break;
        
      case TIME_TO_PASS_FLOOR:
         switch( currentState )
         {  
            case Initializing_move_coordinates:
               // [1903]
               EVTModel_1903();
               nextState = Simulating_move_time;
               break;
                    
            case Updating_destination:
               // [1907]
               EVTModel_1907();
               nextState = Simulating_move_time;
               break;
                    
            case Simulating_move_time:
               // [1908]
               EVTModel_1908();
               nextState = Simulating_move_time;
               break;
                    
         }
         break;
        
   }
    
   currentState = nextState;

   #if defined( SHOW_EVENT_PROCESSING )
   sprintf( str, "New state is '%s'.", StateText( currentState ) );
   rrt.Log( str );
   cout << str << endl;
   #endif // defined( SHOW_EVENT_PROCESSING )
} 

FSM *theModel[ MAX_NUMBER_OF_MODEL_INSTANCES] = { 0 };

int currentNumberOfModelInstances = 0;

FSM **pModelComponentArray = (FSM **)theModel; // initialized defensively
    
////////////////////////////////////////////////////////////////////////////////
//
// EventText
//
// This utility returns a text description for a given event.
//

char *EventText( event theEvent )
{
   static char str[ 80 ]; // ample
   sprintf( str, "<unknown event (%i)>", theEvent );
   const char *theEventStr = str;

   switch( theEvent )
   {    
      case ABORT_TEST:
         theEventStr = "ABORT_TEST";
         break;
	    
      case ALERT:
         theEventStr = "ALERT";
         break;
	    
      case ALL_REQUESTS_CLEARED:
         theEventStr = "ALL_REQUESTS_CLEARED";
         break;
	    
      case ALREADY_THERE:
         theEventStr = "ALREADY_THERE";
         break;
	    
      case ARRIVED_AT_FLOOR:
         theEventStr = "ARRIVED_AT_FLOOR";
         break;
	    
      case BEGIN_TEST:
         theEventStr = "BEGIN_TEST";
         break;
	    
      case CABIN_AT_DESTINATION:
         theEventStr = "CABIN_AT_DESTINATION";
         break;
	    
      case CABIN_REDIRECTED:
         theEventStr = "CABIN_REDIRECTED";
         break;
	    
      case CALL_REGISTERED:
         theEventStr = "CALL_REGISTERED";
         break;
	    
      case CALL_REMAINING:
         theEventStr = "CALL_REMAINING";
         break;
	    
      case CAR_LOCATION:
         theEventStr = "CAR_LOCATION";
         break;
	    
      case CHANGE_DESTINATION:
         theEventStr = "CHANGE_DESTINATION";
         break;
	    
      case CLOSE:
         theEventStr = "CLOSE";
         break;
	    
      case CLOSE_DOOR:
         theEventStr = "CLOSE_DOOR";
         break;
	    
      case CONTINUE_CLOSING_DOOR:
         theEventStr = "CONTINUE_CLOSING_DOOR";
         break;
	    
      case CT_GO_TO_FLOOR:
         theEventStr = "CT_GO_TO_FLOOR";
         break;
	    
      case DELETE:
         theEventStr = "DELETE";
         break;
	    
      case DEST_SELECTED:
         theEventStr = "DEST_SELECTED";
         break;
	    
      case DIRECTION_INDICATOR:
         theEventStr = "DIRECTION_INDICATOR";
         break;
	    
      case DIR_INDICATOR:
         theEventStr = "DIR_INDICATOR";
         break;
	    
      case DISPATCH_CABIN:
         theEventStr = "DISPATCH_CABIN";
         break;
	    
      case DONE:
         theEventStr = "DONE";
         break;
	    
      case DOORS_SECURE:
         theEventStr = "DOORS_SECURE";
         break;
	    
      case DOOR_CLOSED:
         theEventStr = "DOOR_CLOSED";
         break;
	    
      case DOOR_IS_CLOSED:
         theEventStr = "DOOR_IS_CLOSED";
         break;
	    
      case DOOR_IS_HALF_CLOSED:
         theEventStr = "DOOR_IS_HALF_CLOSED";
         break;
	    
      case DOOR_IS_HALF_OPEN:
         theEventStr = "DOOR_IS_HALF_OPEN";
         break;
	    
      case DOOR_IS_OPEN:
         theEventStr = "DOOR_IS_OPEN";
         break;
	    
      case DOOR_POSITION:
         theEventStr = "DOOR_POSITION";
         break;
	    
      case DOOR_STATUS:
         theEventStr = "DOOR_STATUS";
         break;
	    
      case DO_INITIALIZE:
         theEventStr = "DO_INITIALIZE";
         break;
	    
      case END_TEST:
         theEventStr = "END_TEST";
         break;
	    
      case E_CANCEL:
         theEventStr = "E_CANCEL";
         break;
	    
      case FLOOR_CALL:
         theEventStr = "FLOOR_CALL";
         break;
	    
      case FLOOR_CALLED:
         theEventStr = "FLOOR_CALLED";
         break;
	    
      case FLOOR_LABELS_RECEIVED:
         theEventStr = "FLOOR_LABELS_RECEIVED";
         break;
	    
      case GO:
         theEventStr = "GO";
         break;
	    
      case GO_TO_FLOOR:
         theEventStr = "GO_TO_FLOOR";
         break;
	    
      case HOLD_FOR_CALL:
         theEventStr = "HOLD_FOR_CALL";
         break;
	    
      case INITIALIZE:
         theEventStr = "INITIALIZE";
         break;
	    
      case INITIALIZED:
         theEventStr = "INITIALIZED";
         break;
	    
      case JAMMED:
         theEventStr = "JAMMED";
         break;
	    
      case LOCK:
         theEventStr = "LOCK";
         break;
	    
      case MAX_BLDG_DIMS_RECEIVED:
         theEventStr = "MAX_BLDG_DIMS_RECEIVED";
         break;
	    
      case MIGRATED_FOR_CALLED:
         theEventStr = "MIGRATED_FOR_CALLED";
         break;
	    
      case MIGRATED_FOR_STOP:
         theEventStr = "MIGRATED_FOR_STOP";
         break;
	    
      case MODELED_CAR_LOCATION:
         theEventStr = "MODELED_CAR_LOCATION";
         break;
	    
      case MODELED_DIRECTION_INDICATOR:
         theEventStr = "MODELED_DIRECTION_INDICATOR";
         break;
	    
      case MODELED_DIR_INDICATOR:
         theEventStr = "MODELED_DIR_INDICATOR";
         break;
	    
      case MODELED_DOOR_POSITION:
         theEventStr = "MODELED_DOOR_POSITION";
         break;
	    
      case MODELED_DOOR_STATUS:
         theEventStr = "MODELED_DOOR_STATUS";
         break;
	    
      case NEW_TRANSFER:
         theEventStr = "NEW_TRANSFER";
         break;
	    
      case NOT_OBSTRUCTED:
         theEventStr = "NOT_OBSTRUCTED";
         break;
	    
      case NO_DEST:
         theEventStr = "NO_DEST";
         break;
	    
      case NO_TRANSFER_IN_PROGRESS:
         theEventStr = "NO_TRANSFER_IN_PROGRESS";
         break;
	    
      case ONE_SECOND_TICK:
         theEventStr = "ONE_SECOND_TICK";
         break;
	    
      case OPEN:
         theEventStr = "OPEN";
         break;
	    
      case OPEN_DOOR:
         theEventStr = "OPEN_DOOR";
         break;
	    
      case PENDING:
         theEventStr = "PENDING";
         break;
	    
      case PREPARE_TO_MOVE:
         theEventStr = "PREPARE_TO_MOVE";
         break;
	    
      case QUICK_STOP:
         theEventStr = "QUICK_STOP";
         break;
	    
      case QUIESCE_TEST:
         theEventStr = "QUIESCE_TEST";
         break;
	    
      case QUIT_TEST:
         theEventStr = "QUIT_TEST";
         break;
	    
      case SERVICED:
         theEventStr = "SERVICED";
         break;
	    
      case SERVICE_REQUESTED:
         theEventStr = "SERVICE_REQUESTED";
         break;
	    
      case SET_FLOOR_COUNT:
         theEventStr = "SET_FLOOR_COUNT";
         break;
	    
      case SET_FLOOR_LABELS:
         theEventStr = "SET_FLOOR_LABELS";
         break;
	    
      case SET_GROUND_FLOOR:
         theEventStr = "SET_GROUND_FLOOR";
         break;
	    
      case SET_NEW_DEST:
         theEventStr = "SET_NEW_DEST";
         break;
	    
      case SET_SHAFT_COUNT:
         theEventStr = "SET_SHAFT_COUNT";
         break;
	    
      case SHOW_CHANGED:
         theEventStr = "SHOW_CHANGED";
         break;
	    
      case SHOW_IT:
         theEventStr = "SHOW_IT";
         break;
	    
      case SHOW_UNCHANGED:
         theEventStr = "SHOW_UNCHANGED";
         break;
	    
      case START:
         theEventStr = "START";
         break;
	    
      case STOP_ACTIVE:
         theEventStr = "STOP_ACTIVE";
         break;
	    
      case STOP_ALREADY_ACTIVE:
         theEventStr = "STOP_ALREADY_ACTIVE";
         break;
	    
      case STOP_REGISTERED:
         theEventStr = "STOP_REGISTERED";
         break;
	    
      case STOP_REQUESTED:
         theEventStr = "STOP_REQUESTED";
         break;
	    
      case TAKE_OUT_OF_SERVICE:
         theEventStr = "TAKE_OUT_OF_SERVICE";
         break;
	    
      case TIMEOUT:
         theEventStr = "TIMEOUT";
         break;
	    
      case TIME_TO_PASS_FLOOR:
         theEventStr = "TIME_TO_PASS_FLOOR";
         break;
	    
      case TIME_TO_PUSH_THE_CAR_BUTTON:
         theEventStr = "TIME_TO_PUSH_THE_CAR_BUTTON";
         break;
	    
      case TO_READY:
         theEventStr = "TO_READY";
         break;
	    
      case TRANSFER_COMPLETED:
         theEventStr = "TRANSFER_COMPLETED";
         break;
	    
      case TRANSITIONED:
         theEventStr = "TRANSITIONED";
         break;
	    
      case TRANSPORT_IN_PROGRESS:
         theEventStr = "TRANSPORT_IN_PROGRESS";
         break;
	    
      case TRANSPORT_UNAVAILABLE:
         theEventStr = "TRANSPORT_UNAVAILABLE";
         break;
	    
      case UNLOCK:
         theEventStr = "UNLOCK";
         break;
	    
      case UPDATE:
         theEventStr = "UPDATE";
         break;
	    
      case UPDATE_REQUESTED:
         theEventStr = "UPDATE_REQUESTED";
         break;
	    
      case UPDATE_SUCCEEDED:
         theEventStr = "UPDATE_SUCCEEDED";
         break;
	    
      case XFER_DELETED:
         theEventStr = "XFER_DELETED";
         break;
	    
      case XFER_UPDATE_REQUESTED:
         theEventStr = "XFER_UPDATE_REQUESTED";
         break;
	    
   }
   return (char *)theEventStr;
}
    
////////////////////////////////////////////////////////////////////////////////
//
// StateText
//
// This utility returns a text description for a given state.
//

char *StateText( state theState )
{
   const char *theStateStr = "<unknown state>";

   switch( theState )
   {    
      case Announcing_new_request:
         theStateStr = "Announcing_new_request";
         break;
	    
      case Are_we_already_there:
         theStateStr = "Are_we_already_there";
         break;
	    
      case Canceling_for_emergency:
         theStateStr = "Canceling_for_emergency";
         break;
	    
      case Car_button_pushing_is_suspended:
         theStateStr = "Car_button_pushing_is_suspended";
         break;
	    
      case Changing_destination:
         theStateStr = "Changing_destination";
         break;
	    
      case Checking_for_hold:
         theStateStr = "Checking_for_hold";
         break;
	    
      case Clearing:
         theStateStr = "Clearing";
         break;
	    
      case Clearing_requests:
         theStateStr = "Clearing_requests";
         break;
	    
      case Configuration_established:
         theStateStr = "Configuration_established";
         break;
	    
      case Creating_or_updating_transfer:
         theStateStr = "Creating_or_updating_transfer";
         break;
	    
      case Deleting:
         theStateStr = "Deleting";
         break;
	    
      case Door_closed:
         theStateStr = "Door_closed";
         break;
	    
      case Door_closing:
         theStateStr = "Door_closing";
         break;
	    
      case Door_half_closed:
         theStateStr = "Door_half_closed";
         break;
	    
      case Door_half_open:
         theStateStr = "Door_half_open";
         break;
	    
      case Door_is_closed:
         theStateStr = "Door_is_closed";
         break;
	    
      case Door_is_closing:
         theStateStr = "Door_is_closing";
         break;
	    
      case Door_is_half_closed:
         theStateStr = "Door_is_half_closed";
         break;
	    
      case Door_is_half_opened:
         theStateStr = "Door_is_half_opened";
         break;
	    
      case Door_is_locked:
         theStateStr = "Door_is_locked";
         break;
	    
      case Door_is_opened:
         theStateStr = "Door_is_opened";
         break;
	    
      case Door_is_opening:
         theStateStr = "Door_is_opening";
         break;
	    
      case Door_is_unlocking:
         theStateStr = "Door_is_unlocking";
         break;
	    
      case Door_jammed:
         theStateStr = "Door_jammed";
         break;
	    
      case Door_open:
         theStateStr = "Door_open";
         break;
	    
      case Door_opening:
         theStateStr = "Door_opening";
         break;
	    
      case Emergency_stopping:
         theStateStr = "Emergency_stopping";
         break;
	    
      case Going_out_of_service:
         theStateStr = "Going_out_of_service";
         break;
	    
      case Going_to_floor:
         theStateStr = "Going_to_floor";
         break;
	    
      case Holding_for_cleared_call:
         theStateStr = "Holding_for_cleared_call";
         break;
	    
      case Initializing:
         theStateStr = "Initializing";
         break;
	    
      case Initializing_move_coordinates:
         theStateStr = "Initializing_move_coordinates";
         break;
	    
      case Locking_transfer:
         theStateStr = "Locking_transfer";
         break;
	    
      case Making_quick_safe_stop:
         theStateStr = "Making_quick_safe_stop";
         break;
	    
      case Migrating_to_register_call:
         theStateStr = "Migrating_to_register_call";
         break;
	    
      case Migrating_to_register_stop:
         theStateStr = "Migrating_to_register_stop";
         break;
	    
      case Moving:
         theStateStr = "Moving";
         break;
	    
      case Not_requested:
         theStateStr = "Not_requested";
         break;
	    
      case Out_of_service:
         theStateStr = "Out_of_service";
         break;
	    
      case Pending:
         theStateStr = "Pending";
         break;
	    
      case Ready:
         theStateStr = "Ready";
         break;
	    
      case Ready_to_push_car_button:
         theStateStr = "Ready_to_push_car_button";
         break;
	    
      case Ready_to_randomize:
         theStateStr = "Ready_to_randomize";
         break;
	    
      case Ready_to_show:
         theStateStr = "Ready_to_show";
         break;
	    
      case Registering_call:
         theStateStr = "Registering_call";
         break;
	    
      case Registering_stop:
         theStateStr = "Registering_stop";
         break;
	    
      case Requesting_change_to_destination:
         theStateStr = "Requesting_change_to_destination";
         break;
	    
      case Requesting_transport_to_destination:
         theStateStr = "Requesting_transport_to_destination";
         break;
	    
      case Searching_for_best_destination:
         theStateStr = "Searching_for_best_destination";
         break;
	    
      case Securing_doors:
         theStateStr = "Securing_doors";
         break;
	    
      case Service_in_progress:
         theStateStr = "Service_in_progress";
         break;
	    
      case Setting_block_clear_time:
         theStateStr = "Setting_block_clear_time";
         break;
	    
      case Setting_door_open_close_time:
         theStateStr = "Setting_door_open_close_time";
         break;
	    
      case Setting_floor_height:
         theStateStr = "Setting_floor_height";
         break;
	    
      case Setting_floor_labels:
         theStateStr = "Setting_floor_labels";
         break;
	    
      case Setting_ground_floor_level:
         theStateStr = "Setting_ground_floor_level";
         break;
	    
      case Setting_maximum_cabin_velocity:
         theStateStr = "Setting_maximum_cabin_velocity";
         break;
	    
      case Setting_maximum_close_attempts:
         theStateStr = "Setting_maximum_close_attempts";
         break;
	    
      case Setting_minimum_stopping_distance:
         theStateStr = "Setting_minimum_stopping_distance";
         break;
	    
      case Setting_normal_door_wait_time:
         theStateStr = "Setting_normal_door_wait_time";
         break;
	    
      case Setting_number_of_floors:
         theStateStr = "Setting_number_of_floors";
         break;
	    
      case Setting_number_of_shafts:
         theStateStr = "Setting_number_of_shafts";
         break;
	    
      case Simulating_move_time:
         theStateStr = "Simulating_move_time";
         break;
	    
      case Simulating_obstructed_close_1:
         theStateStr = "Simulating_obstructed_close_1";
         break;
	    
      case Simulating_obstructed_close_2:
         theStateStr = "Simulating_obstructed_close_2";
         break;
	    
      case Start:
         theStateStr = "Start";
         break;
	    
      case Stationary:
         theStateStr = "Stationary";
         break;
	    
      case Test_in_progress:
         theStateStr = "Test_in_progress";
         break;
	    
      case Test_is_aborted:
         theStateStr = "Test_is_aborted";
         break;
	    
      case Test_is_completed:
         theStateStr = "Test_is_completed";
         break;
	    
      case Test_is_ended:
         theStateStr = "Test_is_ended";
         break;
	    
      case Test_is_stopped_by_user:
         theStateStr = "Test_is_stopped_by_user";
         break;
	    
      case Test_output_is_complete:
         theStateStr = "Test_output_is_complete";
         break;
	    
      case Transferring_passengers:
         theStateStr = "Transferring_passengers";
         break;
	    
      case Updating_cabin_moving:
         theStateStr = "Updating_cabin_moving";
         break;
	    
      case Updating_cabin_stationary:
         theStateStr = "Updating_cabin_stationary";
         break;
	    
      case Updating_destination:
         theStateStr = "Updating_destination";
         break;
	    
      case Verifying_in_service:
         theStateStr = "Verifying_in_service";
         break;
	    
      case Waiting_for_car_location:
         theStateStr = "Waiting_for_car_location";
         break;
	    
      case Waiting_for_direction_indicator:
         theStateStr = "Waiting_for_direction_indicator";
         break;
	    
      case Waiting_for_door_position:
         theStateStr = "Waiting_for_door_position";
         break;
	    
      case Waiting_for_floor_labels:
         theStateStr = "Waiting_for_floor_labels";
         break;
	    
      case Waiting_for_initial_car_locations:
         theStateStr = "Waiting_for_initial_car_locations";
         break;
	    
      case Waiting_for_maximum_building_dimensions:
         theStateStr = "Waiting_for_maximum_building_dimensions";
         break;
	    
      case Waiting_for_modeled_car_location:
         theStateStr = "Waiting_for_modeled_car_location";
         break;
	    
      case Waiting_for_modeled_direction_indicator:
         theStateStr = "Waiting_for_modeled_direction_indicator";
         break;
	    
      case Waiting_for_modeled_door_position:
         theStateStr = "Waiting_for_modeled_door_position";
         break;
	    
      case Waiting_for_new_transfer:
         theStateStr = "Waiting_for_new_transfer";
         break;
	    
      case Waiting_for_service:
         theStateStr = "Waiting_for_service";
         break;
	    
      case Waiting_for_stop_or_call_request:
         theStateStr = "Waiting_for_stop_or_call_request";
         break;
	    
      case Waiting_to_begin_test:
         theStateStr = "Waiting_to_begin_test";
         break;
	    
      case Waiting_to_initialize:
         theStateStr = "Waiting_to_initialize";
         break;
	    
   }
   return (char *)theStateStr;
}
    
#pragma GCC diagnostic pop
    