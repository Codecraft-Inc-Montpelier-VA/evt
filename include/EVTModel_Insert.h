
/**************************** DO NOT EDIT THIS FILE ****************************
 *
 *  Filename:  EVTModel_Insert.h
 *
 *  This file is one of two automatically-generated files for the RRTGen
 *  EVTModel.  These automatically-generated files should not be
 *  edited; rather, make appropriate updates to the source Draw file and
 *  regenerate the files.
 *
 *       Created by:  RRTGenCodeGenerator.xsl, Version 1.1
 *  From model file:  C:\cygwin64\home\Cary\ShiraTronics_demos\Anoka\evt\code\EVTModel.odg
 *    Model version:  0.61
 *          On date:  August 17, 2021, at 3.11 p.m.
 *
 *        Copyright (c) 2007-2015 Codecraft, Inc.  All rights reserved.
 */

 #pragma once

    
enum state
{
   Announcing_new_request,
   Are_we_already_there,
   Canceling_for_emergency,
   Car_button_pushing_is_suspended,
   Changing_destination,
   Checking_for_hold,
   Clearing,
   Clearing_requests,
   Configuration_established,
   Creating_or_updating_transfer,
   Deleting,
   Door_closed,
   Door_closing,
   Door_half_closed,
   Door_half_open,
   Door_is_closed,
   Door_is_closing,
   Door_is_half_closed,
   Door_is_half_opened,
   Door_is_locked,
   Door_is_opened,
   Door_is_opening,
   Door_is_unlocking,
   Door_jammed,
   Door_open,
   Door_opening,
   Emergency_stopping,
   Going_out_of_service,
   Going_to_floor,
   Holding_for_cleared_call,
   Initializing,
   Initializing_move_coordinates,
   Locking_transfer,
   Making_quick_safe_stop,
   Migrating_to_register_call,
   Migrating_to_register_stop,
   Moving,
   Not_requested,
   Out_of_service,
   Pending,
   Ready,
   Ready_to_push_car_button,
   Ready_to_randomize,
   Ready_to_show,
   Registering_call,
   Registering_stop,
   Requesting_change_to_destination,
   Requesting_transport_to_destination,
   Searching_for_best_destination,
   Securing_doors,
   Service_in_progress,
   Setting_block_clear_time,
   Setting_door_open_close_time,
   Setting_floor_height,
   Setting_floor_labels,
   Setting_ground_floor_level,
   Setting_maximum_cabin_velocity,
   Setting_maximum_close_attempts,
   Setting_minimum_stopping_distance,
   Setting_normal_door_wait_time,
   Setting_number_of_floors,
   Setting_number_of_shafts,
   Simulating_move_time,
   Simulating_obstructed_close_1,
   Simulating_obstructed_close_2,
   Start,
   Stationary,
   Test_in_progress,
   Test_is_aborted,
   Test_is_completed,
   Test_is_ended,
   Test_is_stopped_by_user,
   Test_output_is_complete,
   Transferring_passengers,
   Updating_cabin_moving,
   Updating_cabin_stationary,
   Updating_destination,
   Verifying_in_service,
   Waiting_for_car_location,
   Waiting_for_direction_indicator,
   Waiting_for_door_position,
   Waiting_for_floor_labels,
   Waiting_for_initial_car_locations,
   Waiting_for_maximum_building_dimensions,
   Waiting_for_modeled_car_location,
   Waiting_for_modeled_direction_indicator,
   Waiting_for_modeled_door_position,
   Waiting_for_new_transfer,
   Waiting_for_service,
   Waiting_for_stop_or_call_request,
   Waiting_to_begin_test,
   Waiting_to_initialize,
   
   STATE_COUNT
};
    
enum event
{
   ABORT_TEST,
   ALERT,
   ALL_REQUESTS_CLEARED,
   ALREADY_THERE,
   ARRIVED_AT_FLOOR,
   BEGIN_TEST,
   CABIN_AT_DESTINATION,
   CABIN_REDIRECTED,
   CALL_REGISTERED,
   CALL_REMAINING,
   CAR_LOCATION,
   CHANGE_DESTINATION,
   CLOSE,
   CLOSE_DOOR,
   CONTINUE_CLOSING_DOOR,
   CT_GO_TO_FLOOR,
   DELETE,
   DEST_SELECTED,
   DIRECTION_INDICATOR,
   DIR_INDICATOR,
   DISPATCH_CABIN,
   DONE,
   DOORS_SECURE,
   DOOR_CLOSED,
   DOOR_IS_CLOSED,
   DOOR_IS_HALF_CLOSED,
   DOOR_IS_HALF_OPEN,
   DOOR_IS_OPEN,
   DOOR_POSITION,
   DOOR_STATUS,
   DO_INITIALIZE,
   END_TEST,
   E_CANCEL,
   FLOOR_CALL,
   FLOOR_CALLED,
   FLOOR_LABELS_RECEIVED,
   GO,
   GO_TO_FLOOR,
   HOLD_FOR_CALL,
   INITIALIZE,
   INITIALIZED,
   JAMMED,
   LOCK,
   MAX_BLDG_DIMS_RECEIVED,
   MIGRATED_FOR_CALLED,
   MIGRATED_FOR_STOP,
   MODELED_CAR_LOCATION,
   MODELED_DIRECTION_INDICATOR,
   MODELED_DIR_INDICATOR,
   MODELED_DOOR_POSITION,
   MODELED_DOOR_STATUS,
   NEW_TRANSFER,
   NOT_OBSTRUCTED,
   NO_DEST,
   NO_TRANSFER_IN_PROGRESS,
   ONE_SECOND_TICK,
   OPEN,
   OPEN_DOOR,
   PENDING,
   PREPARE_TO_MOVE,
   QUICK_STOP,
   QUIESCE_TEST,
   QUIT_TEST,
   SERVICED,
   SERVICE_REQUESTED,
   SET_FLOOR_COUNT,
   SET_FLOOR_LABELS,
   SET_GROUND_FLOOR,
   SET_NEW_DEST,
   SET_SHAFT_COUNT,
   SHOW_CHANGED,
   SHOW_IT,
   SHOW_UNCHANGED,
   START,
   STOP_ACTIVE,
   STOP_ALREADY_ACTIVE,
   STOP_REGISTERED,
   STOP_REQUESTED,
   TAKE_OUT_OF_SERVICE,
   TIMEOUT,
   TIME_TO_PASS_FLOOR,
   TIME_TO_PUSH_THE_CAR_BUTTON,
   TO_READY,
   TRANSFER_COMPLETED,
   TRANSITIONED,
   TRANSPORT_IN_PROGRESS,
   TRANSPORT_UNAVAILABLE,
   UNLOCK,
   UPDATE,
   UPDATE_REQUESTED,
   UPDATE_SUCCEEDED,
   XFER_DELETED,
   XFER_UPDATE_REQUESTED,
   
   EVENT_COUNT
};
    
// The Fifo and FSM classes from the RRTGen framework are included here.
#include "RRTGenClasses.h"

// Model components.
class Cabin_Model;
class Comparator_Model;
class CompareCarLocations_Model;
class CompareDirIndicators_Model;
class CompareDoorPositions_Model;
class Door_Model;
class EVT_Configuration_Model;
class EVT_Show_Model;
class Shaft_Model;
class ShaftLevel_Model;
class Signal_IO_Model;
class Stim_CarButtons_Model;
class Transfer_Model;
class Transport_Model;

class Cabin_Model : public FSM   // Cabin
{
   char currentFloor;
   Transfer_Model * currentXfer;
   bool moving;
   Door_Model * myDoor;
   Shaft_Model * myShaft;
   Transport_Model * myTransport;
   direction travelDirection;

 public:
   Cabin_Model( int instanceNumber = 1,
                const char *modelName = "Cabin",
                state initialState = Start )
   : FSM( instanceNumber, initialState, modelName ),
     currentFloor( blank ),
     currentXfer( 0 ),
     moving( false ),
     myDoor( 0 ),
     myShaft( 0 ),
     myTransport( 0 ),
     travelDirection( none )
   {}
            
   void EVTModel_1400( void );
   void EVTModel_1401( void );
   void EVTModel_1402( char parm1, char parm2 );
   void EVTModel_1403( void );
   void EVTModel_1404( void );
   void EVTModel_1405( void );
   void EVTModel_1406( void );
   void EVTModel_1407( void );
   void EVTModel_1408( void );
   void EVTModel_1409( void );
   void EVTModel_1410( void );
   void EVTModel_1411( void );
   void EVTModel_1412( void );
   void EVTModel_1413( void );
   void EVTModel_1414( void );
   void EVTModel_1415( void );
   void EVTModel_1416( void );

   int EstimateTravelDelay( char floor, char callingDir );
   char GetCurrentFloor( void );
   Transfer_Model* GetCurrentXfer( void );
   Door_Model* GetMyDoor( void );
   Shaft_Model* GetMyShaft( void );
   direction GetTravelDirection( void );
   char* NearestBLEV( char dir );
   bool Ping( char* floor, direction* dir, bool searchingBehind );
   void Pong( void );
   void SetCurrentXfer( Transfer_Model* currentXfer );
   void SetMyDoor( Door_Model* myDoor );
   void SetMyShaft( Shaft_Model* myShaft );
   void SetMyTransport( Transport_Model* myTransport );
   void ToggleDir( void );
   void UpdateLocation( char floor );

   void Update( event theEvent, char parm1, char parm2 );
};
        
class Comparator_Model : public FSM   // Comparator
{
   int initialCarLocationEventCounter;
   unsigned int nextTickTime;

 public:
   Comparator_Model( int instanceNumber = 1,
                     const char *modelName = "Comparator",
                     state initialState = Start )
   : FSM( instanceNumber, initialState, modelName ),
     initialCarLocationEventCounter( 0 ),
     nextTickTime( 0 )
   {}
            
   void EVTModel_1300( void );
   void EVTModel_1301( void );
   void EVTModel_1302( void );
   void EVTModel_1303( char parm1, char parm2 );
   void EVTModel_1304( char parm1, char parm2 );
   void EVTModel_1305( char parm1, char parm2 );
   void EVTModel_1306( char parm1, char parm2 );
   void EVTModel_1307( void );
   void EVTModel_1308( char parm1, char parm2 );
   void EVTModel_1309( char parm1, char parm2 );
   void EVTModel_1310( char parm1, char parm2 );
   void EVTModel_1311( char parm1, char parm2 );
   void EVTModel_1312( char parm1, char parm2 );

   void Update( event theEvent, char parm1, char parm2 );
};
        
class CompareCarLocations_Model : public FSM   // CompareCarLocations
{
   char shaft;
   char lastCarLocation;
   unsigned int lastCarTime;
   unsigned int lastTimeDifferential;

 public:
   CompareCarLocations_Model( int instanceNumber = 1,
                              const char *modelName = "CompareCarLocations",
                              state initialState = Start )
   : FSM( instanceNumber, initialState, modelName ),
     shaft( blank ),
     lastCarLocation( blank ),
     lastCarTime( 0 ),
     lastTimeDifferential( 0 )
   {}
            
   void EVTModel_2100( void );
   void EVTModel_2101( char parm1, char parm2 );
   void EVTModel_2102( char parm1, char parm2 );
   void EVTModel_2103( char parm1, char parm2 );
   void EVTModel_2104( char parm1, char parm2 );
   void EVTModel_2105( void );
   void EVTModel_2106( char parm1, char parm2 );
   void EVTModel_2107( void );
   void EVTModel_2108( void );
   void EVTModel_2109( void );

   void Update( event theEvent, char parm1, char parm2 );
};
        
class CompareDirIndicators_Model : public FSM   // CompareDirIndicators
{
   char shaft;
   char lastDirIndicator;
   unsigned int lastDirTime;
   unsigned int lastTimeDifferential;

 public:
   CompareDirIndicators_Model( int instanceNumber = 1,
                               const char *modelName = "CompareDirIndicators",
                               state initialState = Start )
   : FSM( instanceNumber, initialState, modelName ),
     shaft( blank ),
     lastDirIndicator( blank ),
     lastDirTime( 0 ),
     lastTimeDifferential( 0 )
   {}
            
   void EVTModel_2300( void );
   void EVTModel_2301( char parm1, char parm2 );
   void EVTModel_2302( char parm1, char parm2 );
   void EVTModel_2303( char parm1, char parm2 );
   void EVTModel_2304( char parm1, char parm2 );
   void EVTModel_2305( void );
   void EVTModel_2306( char parm1, char parm2 );
   void EVTModel_2307( void );
   void EVTModel_2308( void );
   void EVTModel_2309( void );

   void Update( event theEvent, char parm1, char parm2 );
};
        
class CompareDoorPositions_Model : public FSM   // CompareDoorPositions
{
   char shaft;
   char lastDoorPosition;
   unsigned int lastDoorTime;
   unsigned int lastTimeDifferential;

 public:
   CompareDoorPositions_Model( int instanceNumber = 1,
                               const char *modelName = "CompareDoorPositions",
                               state initialState = Start )
   : FSM( instanceNumber, initialState, modelName ),
     shaft( blank ),
     lastDoorPosition( blank ),
     lastDoorTime( 0 ),
     lastTimeDifferential( 0 )
   {}
            
   void EVTModel_2200( void );
   void EVTModel_2201( char parm1, char parm2 );
   void EVTModel_2202( char parm1, char parm2 );
   void EVTModel_2203( char parm1, char parm2 );
   void EVTModel_2204( char parm1, char parm2 );
   void EVTModel_2205( void );
   void EVTModel_2206( char parm1, char parm2 );
   void EVTModel_2207( void );
   void EVTModel_2208( void );
   void EVTModel_2209( void );

   void Update( event theEvent, char parm1, char parm2 );
};
        
class Door_Model : public FSM   // Door
{
   bool doorClosed;
   bool emergencyHold;
   bool held;
   bool lockRequested;
   Cabin_Model * myCabin;
   Signal_IO_Model * mySignalIo;
   unsigned int openWaitTime;
   int retries;

 public:
   Door_Model( int instanceNumber = 1,
               const char *modelName = "Door",
               state initialState = Start )
   : FSM( instanceNumber, initialState, modelName ),
     doorClosed( false ),
     emergencyHold( false ),
     held( false ),
     lockRequested( false ),
     myCabin( 0 ),
     mySignalIo( 0 ),
     openWaitTime( 0 ),
     retries( 0 )
   {}
            
   void EVTModel_1500( void );
   void EVTModel_1501( void );
   void EVTModel_1502( void );
   void EVTModel_1503( void );
   void EVTModel_1504( void );
   void EVTModel_1505( void );
   void EVTModel_1506( void );
   void EVTModel_1507( void );
   void EVTModel_1508( void );
   void EVTModel_1509( void );

   bool IsDoorClosed( void );
   void SetLockRequested( bool lockRequested );
   void SetMyCabin( Cabin_Model* myCabin );
   void SetMySignalIo( Signal_IO_Model* mySignalIo );

   void Update( event theEvent, char parm1, char parm2 );
};
        
class EVT_Configuration_Model : public FSM   // EVT_Configuration
{

 public:
   EVT_Configuration_Model( int instanceNumber = 1,
                            const char *modelName = "EVT_Configuration",
                            state initialState = Start )
   : FSM( instanceNumber, initialState, modelName )
   {}
            
   void EVTModel_1000( void );
   void EVTModel_1001( char parm1, char parm2 );
   void EVTModel_1002( void );
   void EVTModel_1003( void );
   void EVTModel_1004( void );
   void EVTModel_1005( void );
   void EVTModel_1006( void );
   void EVTModel_1007( void );
   void EVTModel_1008( void );
   void EVTModel_1009( void );
   void EVTModel_1010( void );
   void EVTModel_1011( void );
   void EVTModel_1012( void );
   void EVTModel_1013( void );
   void EVTModel_1014( void );
   void EVTModel_1015( void );
   void EVTModel_1016( void );
   void EVTModel_1017( void );
   void EVTModel_1018( void );

   void Update( event theEvent, char parm1, char parm2 );
};
        
class EVT_Show_Model : public FSM   // EVT_Show
{
   bool quiescent;

 public:
   EVT_Show_Model( int instanceNumber = 1,
                   const char *modelName = "EVT_Show",
                   state initialState = Start )
   : FSM( instanceNumber, initialState, modelName ),
     quiescent( false )
   {}
            
   void EVTModel_1100( void );
   void EVTModel_1101( void );
   void EVTModel_1102( void );
   void EVTModel_1103( void );
   void EVTModel_1104( char parm1, char parm2 );
   void EVTModel_1105( void );

   void Update( event theEvent, char parm1, char parm2 );
};
        
class Shaft_Model : public FSM   // Shaft
{
   bool inService;
   Cabin_Model * myCabin;

 public:
   Shaft_Model( int instanceNumber = 1,
                const char *modelName = "Shaft",
                state initialState = Start )
   : FSM( instanceNumber, initialState, modelName ),
     inService( false ),
     myCabin( 0 )
   {}
            
   void EVTModel_1600( void );
   void EVTModel_1601( void );
   void EVTModel_1602( void );
   void EVTModel_1603( void );
   void EVTModel_1604( void );
   void EVTModel_1605( char parm1, char parm2 );
   void EVTModel_1606( char parm1, char parm2 );
   void EVTModel_1607( void );
   void EVTModel_1608( void );
   void EVTModel_1609( void );
   void EVTModel_1610( void );

   bool GetInService( void );
   Cabin_Model* GetMyCabin( void );
   void SetMyCabin( Cabin_Model* myCabin );

   void Update( event theEvent, char parm1, char parm2 );
};
        
class ShaftLevel_Model : public FSM   // ShaftLevel
{
   char floor;
   bool inService;
   Cabin_Model * myCabin;
   char shaft;
   bool stopRequested;

 public:
   ShaftLevel_Model( int instanceNumber = 1,
                     const char *modelName = "ShaftLevel",
                     state initialState = Start )
   : FSM( instanceNumber, initialState, modelName ),
     floor( blank ),
     inService( false ),
     myCabin( 0 ),
     shaft( blank ),
     stopRequested( false )
   {}
            
   void EVTModel_1700( void );
   void EVTModel_1701( char parm1, char parm2 );
   void EVTModel_1702( char parm1, char parm2 );
   void EVTModel_1703( void );
   void EVTModel_1704( void );
   void EVTModel_1705( char parm1, char parm2 );
   void EVTModel_1706( char parm1, char parm2 );
   void EVTModel_1707( void );
   void EVTModel_1708( void );
   void EVTModel_1709( void );
   void EVTModel_1710( void );
   void EVTModel_1711( void );
   void EVTModel_1712( void );
   void EVTModel_1713( void );
   void EVTModel_1714( void );
   void EVTModel_1715( void );
   void EVTModel_1716( void );

   bool Clear_call( direction dir );
   void Clear_stop( void );
   void E_clear( void );
   bool Floors_requested( direction dir );
   void Init( char floor, char shaft );
   void Migrate_Nreq( void );
   void Migrate_Req( void );
   void SetMyCabin( Cabin_Model* myCabin );
   bool StopRequested( void );

   void Update( event theEvent, char parm1, char parm2 );
};
        
class Signal_IO_Model : public FSM   // Signal_IO
{
   bool jamInPlace;
   Door_Model * myDoor;
   bool simulateJam;

 public:
   Signal_IO_Model( int instanceNumber = 1,
                    const char *modelName = "Signal_IO",
                    state initialState = Start )
   : FSM( instanceNumber, initialState, modelName ),
     jamInPlace( false ),
     myDoor( 0 ),
     simulateJam( false )
   {}
            
   void EVTModel_2000( void );
   void EVTModel_2001( void );
   void EVTModel_2002( void );
   void EVTModel_2003( void );
   void EVTModel_2004( void );
   void EVTModel_2005( void );
   void EVTModel_2006( void );
   void EVTModel_2007( void );
   void EVTModel_2008( void );
   void EVTModel_2009( void );
   void EVTModel_2010( void );
   void EVTModel_2011( void );

   void SetMyDoor( Door_Model* myDoor );

   void Update( event theEvent, char parm1, char parm2 );
};
        
class Stim_CarButtons_Model : public FSM   // Stim_CarButtons
{
   int idleCounter;
   unsigned int nextArrivalTime;

 public:
   Stim_CarButtons_Model( int instanceNumber = 1,
                          const char *modelName = "Stim_CarButtons",
                          state initialState = Start )
   : FSM( instanceNumber, initialState, modelName ),
     idleCounter( 0 ),
     nextArrivalTime( 0 )
   {}
            
   void EVTModel_1200( void );
   void EVTModel_1201( void );
   void EVTModel_1202( void );
   void EVTModel_1203( void );
   void EVTModel_1204( void );
   void EVTModel_1205( void );
   void EVTModel_1206( void );

   void Update( event theEvent, char parm1, char parm2 );
};
        
class Transfer_Model : public FSM   // Transfer
{
   bool callInProgress;
   char destination;
   Cabin_Model * myCabin;
   char shaft;

 public:
   Transfer_Model( int instanceNumber = 1,
                   const char *modelName = "Transfer",
                   state initialState = Start )
   : FSM( instanceNumber, initialState, modelName ),
     callInProgress( false ),
     destination( blank ),
     myCabin( 0 ),
     shaft( blank )
   {}
            
   void EVTModel_1800( void );
   void EVTModel_1801( char parm1, char parm2 );
   void EVTModel_1802( void );
   void EVTModel_1803( void );
   void EVTModel_1804( void );
   void EVTModel_1805( void );
   void EVTModel_1806( void );
   void EVTModel_1807( char parm1, char parm2 );
   void EVTModel_1808( void );
   void EVTModel_1809( void );
   void EVTModel_1810( char parm1, char parm2 );
   void EVTModel_1811( void );
   void EVTModel_1812( char parm1, char parm2 );
   void EVTModel_1813( void );
   void EVTModel_1814( void );
   void EVTModel_1815( void );
   void EVTModel_1816( char parm1, char parm2 );

   void Change_Destination( char newDest );
   char GetDestination( void );
   bool GetCallInProgress( void );
   void Init( char dest, char shaft, Cabin_Model* cabin );

   void Update( event theEvent, char parm1, char parm2 );
};
        
class Transport_Model : public FSM   // Transport
{
   char currentFloor;
   double currentPosition;
   char destFloor;
   double destPosition;
   int dirScale;
   Cabin_Model * myCabin;
   double transitDistance;
   int transitTime;

 public:
   Transport_Model( int instanceNumber = 1,
                    const char *modelName = "Transport",
                    state initialState = Start )
   : FSM( instanceNumber, initialState, modelName ),
     currentFloor( blank ),
     currentPosition( 0 ),
     destFloor( blank ),
     destPosition( 0 ),
     dirScale( 0 ),
     myCabin( 0 ),
     transitDistance( 0 ),
     transitTime( 0 )
   {}
            
   void EVTModel_1900( void );
   void EVTModel_1901( void );
   void EVTModel_1902( char parm1, char parm2 );
   void EVTModel_1903( void );
   void EVTModel_1904( void );
   void EVTModel_1905( char parm1, char parm2 );
   void EVTModel_1906( char parm1, char parm2 );
   void EVTModel_1907( void );
   void EVTModel_1908( void );
   void EVTModel_1909( void );
   void EVTModel_1910( void );
   void EVTModel_1911( char parm1, char parm2 );
   void EVTModel_1912( void );

   Cabin_Model* GetMyCabin( void );
   bool GoToFloor( char dest );
   void SetMyCabin( Cabin_Model* myCabin );

   void Update( event theEvent, char parm1, char parm2 );
};
        